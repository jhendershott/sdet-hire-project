import '../support/commands'
import { VulnerabilityStats } from '../fixtures/pages/vulnerability-stats';
var severity = require('../fixtures/response-mocks/severity.json');
var vs = VulnerabilityStats

//ideally this wouldn't be done on an environment and full application 
//but by rendering only the vulnerability component

describe('Vulnerability component unit tests', function () {
    beforeEach(function () {
        cy.server()
        cy.login(Process.Env.ContrastUsername, Process.Env.ContrastPassword);
    })

    describe('Vulnerability boundary tests', function() {
        xit("0 vulnerabilities", function () {
            severity.total_vulnerabilities = 0;
            severity.traces_breakdown = [];
            cy.route('**/severity**', severity);
            cy.get(VulnerabilityStats.vulnerabilityStats);
            var vs = VulnerabilityStats;

            cy.get(`${vs.vulnerabilityStats} ${vs.thermometerChart} span`).then(
                ($thermometer) => {
                    expect($thermometer.text()).eql('Looking good!');
                })

            cy.get(`${vs.vulnerabilityStats} ${vs.count}`).then(
                ($statsCount) =>{
                    expect($statsCount.text()).contains('0');
                });
        })

        xit("Very high number of vulnerabilities", function () {
            severity.total_vulnerabilities = 1000000000;
            cy.route('**/severity**', severity);
            cy.get(vs.vulnerabilityStats);
            cy.get(`${vs.vulnerabilityStats} ${vs.count}` , {timeout: 3000}).should('contain', '1000000000');
        })

        it("Should display temperature chart", function() {
            severity.total_vulnerabilities = 25;
            severity.traces_breakdown[0].traces = 5;
            severity.traces_breakdown[1].traces = 5
            severity.traces_breakdown[1].traces = 5;            
            severity.traces_breakdown[2].traces = 5;            
            severity.traces_breakdown[3].traces = 5;
            cy.route('**/severity**', severity);

            //var width = cy.get(`${vs.vulnerabilityStats} ${vs.thermometerChart}`).its('width');
            //var partial = parseInt(width) / 5;


            cy.wait(vs.high).its('width').should("eql", "92.66px")
                .and("have.css","background-color", "#e63025")
                .and("have.css","contain", "5");
        })
    })
})